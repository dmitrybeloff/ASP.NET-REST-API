<?xml version="1.0"?>
<doc>
    <assembly>
        <name>API.Services</name>
    </assembly>
    <members>
        <member name="T:API.Services.Enum.SortDirection">
            <summary>
            Sort directions
            </summary>
        </member>
        <member name="F:API.Services.Enum.SortDirection.None">
            <summary>
            No ordering
            </summary>
        </member>
        <member name="F:API.Services.Enum.SortDirection.Ascending">
            <summary>
            Ascending order
            </summary>
        </member>
        <member name="F:API.Services.Enum.SortDirection.Descending">
            <summary>
            Descending order
            </summary>
        </member>
        <member name="T:API.Services.Extensions.LinqExtensions">
            <summary>
            A set of Linq extensions used to create reusable methods, which are intended to be used in Data Access services.
            </summary>
        </member>
        <member name="M:API.Services.Extensions.LinqExtensions.MapEntitiesToList``2(System.Collections.Generic.IEnumerable{``0},API.Services.Mapper.Interaces.IMapper)">
            <summary>
            Maps a list if database entities to the list of corresponding model objects.
            </summary>
            <typeparam name="TSource">Type of a database entity.</typeparam>
            <typeparam name="TDest">Type of a model object type.</typeparam>
            <param name="query">Used to specify a list of objects to be mapped.</param>
            <param name="mapper">Used to specify a mapper object.</param>
            <returns>A list of the mapped objects</returns>
        </member>
        <member name="T:API.Services.Mapper.Mapper">
            <inheritdoc/>
        </member>
        <member name="M:API.Services.Mapper.Mapper.MapEntityToModel``2(``0,System.Collections.Generic.HashSet{System.String})">
            <inheritdoc/>
        </member>
        <member name="T:API.Services.Services.GenericReadService">
            <inheritdoc/>
        </member>
        <member name="M:API.Services.Services.GenericReadService.API#Services#Services#Interfaces#IGenericReadService#ReadAsync``2(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.String[])">
            <inheritdoc/>
        </member>
        <member name="M:API.Services.Services.GenericReadService.API#Services#Services#Interfaces#IGenericReadService#ReadManyAsync``2(System.Int32,System.Int32,System.String[])">
            <inheritdoc/>
        </member>
        <member name="M:API.Services.Services.GenericReadService.API#Services#Services#Interfaces#IGenericReadService#ReadManyAsync``2(System.Int32,System.Int32,System.String[],System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <inheritdoc/>
        </member>
        <member name="M:API.Services.Services.GenericReadService.API#Services#Services#Interfaces#IGenericReadService#ReadManyAsync``3(System.Int32,System.Int32,System.String[],System.Linq.Expressions.Expression{System.Func{``0,``2}},API.Services.Enum.SortDirection)">
            <inheritdoc/>
        </member>
        <member name="M:API.Services.Services.GenericReadService.API#Services#Services#Interfaces#IGenericReadService#ReadManyAsync``3(System.Int32,System.Int32,System.String[],System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,``2}},API.Services.Enum.SortDirection)">
            <inheritdoc/>
        </member>
        <member name="T:API.Services.Services.Interfaces.IGenericReadService">
            <summary>
            Service that contains generic database read access operations.
            </summary>
        </member>
        <member name="M:API.Services.Services.Interfaces.IGenericReadService.ReadAsync``2(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.String[])">
            <summary>
            Gets an entity value of type <typeparamref name="TSource"/> from the database using the <paramref name="predicate"/> predicate to filter result.
            Search result must be unique, otherwise the exception is thrown. Relative entities can be included.
            </summary>
            <typeparam name="TSource">Entity type.</typeparam>
            <typeparam name="TDest">View model type.</typeparam>
            <param name="predicate">Used to filter results.</param>
            <param name="include">Used to specify relative entities that should be included in result object.</param>
            <returns>An object of type <typeparamref name="TDest"/></returns>
        </member>
        <member name="M:API.Services.Services.Interfaces.IGenericReadService.ReadManyAsync``2(System.Int32,System.Int32,System.String[])">
            <summary>
            Gets a list of entity values of type <typeparamref name="TSource"/> from the database.
            Relative entities can be included.
            </summary>
            <typeparam name="TSource">Entity type.</typeparam>
            <typeparam name="TDest">View model type.</typeparam>
            <param name="start">Used to specify offset.</param>
            <param name="count">Used to specify count.</param>
            <param name="include">Used to specify relative entities that should be included in result object.</param>
            <returns>A list of objects of type <typeparamref name="TDest"/></returns>
        </member>
        <member name="M:API.Services.Services.Interfaces.IGenericReadService.ReadManyAsync``2(System.Int32,System.Int32,System.String[],System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Gets a list of entity values of type <typeparamref name="TSource"/> from the database.
            Entities can be filtered. Relative entities can be included.
            </summary>
            <typeparam name="TSource">Entity type.</typeparam>
            <typeparam name="TDest">View model type.</typeparam>
            <param name="start">Used to specify offset.</param>
            <param name="count">Used to specify count.</param>
            <param name="include">Used to specify relative entities that should be included in result object.</param>
            <param name="predicate">Used to filter results.</param>
            <returns>A list of objects of type <typeparamref name="TDest"/></returns>
        </member>
        <member name="M:API.Services.Services.Interfaces.IGenericReadService.ReadManyAsync``3(System.Int32,System.Int32,System.String[],System.Linq.Expressions.Expression{System.Func{``0,``2}},API.Services.Enum.SortDirection)">
            <summary>
            Gets a list of entity values of type <typeparamref name="TSource"/> from the database.
            Entities can be ordered. Relative entities can be included. Type <typeparamref name="TKey"/> is used in <paramref name="orderDelegate"/>.
            </summary>
            <typeparam name="TSource">Entity type.</typeparam>
            <typeparam name="TDest">View model type.</typeparam>
            <typeparam name="TKey">Type of the object, that is used to order results.</typeparam>
            <param name="start">Used to specify offset.</param>
            <param name="count">Used to specify count.</param>
            <param name="include">Used to specify relative entities that should be included in result object.</param>
            <param name="orderDelegate">Used to order results.</param>
            <param name="sortDirection">Used to specify the direction of the ordering.</param>
            <returns>A list of objects of type <typeparamref name="TDest"/></returns>
        </member>
        <member name="M:API.Services.Services.Interfaces.IGenericReadService.ReadManyAsync``3(System.Int32,System.Int32,System.String[],System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,``2}},API.Services.Enum.SortDirection)">
            <summary>
            Gets a list of entity values of type <typeparamref name="TSource"/> from the database.
            Entities can be filtered and ordered. Relative entities can be included. Type <typeparamref name="TKey"/> is used in <paramref name="orderDelegate"/>.
            </summary>
            <typeparam name="TSource">Entity type.</typeparam>
            <typeparam name="TDest">View model type.</typeparam>
            <typeparam name="TKey">Type of the object, that is used to order results.</typeparam>
            <param name="start">Used to specify offset.</param>
            <param name="count">Used to specify count.</param>
            <param name="include">Used to specify relative entities that should be included in result object.</param>
            <param name="predicate">Used to filter results.</param>
            <param name="orderDelegate">Used to order results.</param>
            <param name="sortDirection">Used to specify the direction of the ordering.</param>
            <returns>A list of objects of type <typeparamref name="TDest"/></returns>
        </member>
    </members>
</doc>
